top <- c("\\begin{table}[ht]", "\\centering", "\\begin{tabular}{r *{11}{c}}",                                                                                                                                                             #
	"\\hline", paste("", paste("&",nval, collapse=""), "\\\\"), "\\hline")
top
top <- c("\\begin{table}[ht]", "\\centering", "\\begin{tabular}{r *{11}{c}}",                                                                                                                                                             #
	"\\hline", paste("", paste(" &",nval, collapse=""), "\\\\"), "\\hline")#
bottom <- c("\\hline", "\\end{tabular}", "\\end{table}")
top
writeLines(c(top,out,bottom), "rel_error.txt")
writeLines(c(top,out,bottom), "rel_error.tex")
source("/Users/david/Library/Mobile Documents/com~apple~CloudDocs/Research/2018/Feature matching/simulations/simulations_summary.R")
?library
installed.packages()[,1]
library(Rglpk)
help(package="Rglpk")
obj <- c(2, 4, 3)#
mat <- matrix(c(3, 2, 1, 4, 1, 3, 2, 2, 2), nrow = 3)#
dir <- c("<=", "<=", "<=")#
rhs <- c(60, 40, 80)#
max <- TRUE#
#
Rglpk_solve_LP(obj, mat, dir, rhs, max = max)
library(Rgplk)
library(Rglpk)
remove.packages("Rglpk")
install.packages("Rglpk")
sessionInfo()
setwd("~/Library/Mobile Documents/com~apple~CloudDocs/Research/2018/Feature matching/package/matchFeat/simulations")
library(matchFeat)#
library(clue)#
#
## Source files#
source("bandelt.R")#
source("gradient-projection.R")#
source("utils.R")#
#
## Load handwritten digit data from "matchFeat"#
data(optdigits)#
m <- 10#
n <- 100#
p <- 64#
x <- optdigits$x#
unit <- optdigits$unit
source("/var/folders/ll/2rk972nn4gv6yhsyqc_w63r40000gn/T//RtmpHv7uv5/file7ed0456faf5c")#
unlink("/var/folders/ll/2rk972nn4gv6yhsyqc_w63r40000gn/T//RtmpHv7uv5/file7ed0456faf5c")
source("/Users/david/Desktop/tmp.R")
source("/Users/david/Library/Mobile Documents/com~apple~CloudDocs/Research/2018/Feature matching/simulations/lbfw.R")
?poly
source("/Users/david/Library/Mobile Documents/com~apple~CloudDocs/Research/2018/Feature matching/simulations/lbfw.R")
dim(x)
xx <- t(x)#
dim(xx) <- c(p,m,n)
test <- lbfw(xx)
alpha
-b/a
source("/Users/david/Library/Mobile Documents/com~apple~CloudDocs/Research/2018/Feature matching/simulations/lbfw.R")
test <- lbfw(xx)
source("/Users/david/Library/Mobile Documents/com~apple~CloudDocs/Research/2018/Feature matching/simulations/lbfw.R")
test <- lbfw(xx)
curve(obj2,0,1,add=F,lty=2)
optimize(obj2,c(0,1))
alpha
obj2(alpha)
pol(alpha)
(pol(alpha) - objective) / n / (n-1) + objective
?solve_LSAP
a <- a / n / (n-1)#
		b <- b / n / (n-1)#
		pol <- function(alpha) a * alpha^2 + 2 * b * alpha + objective
pol(0)
pol(1)
obj2(0)
obj2(1)
objective.arr(x,QQ)
objective.fun(x,Q)
Q[,1]
QQ[,,1]
QQ[,,2]
Q[,2]
sigQ <- apply(QQ == 1, c(1,3), which)
dim(sigQ)
sigQ[,1]
Q[,1]
identical(Q,sigQ)
all(Q == sigQ)
attributes(Q)
attributes(sigQ)
range(Q- sigQ)
objective.fun
dim(P)
objective.arr(x,P)
objective.fun(x,Q)
pol(0)
pol(1)
objective.arr(x,QQ)
debug(objective.arr)
objective.arr(x,QQ)
n+0
p
m
dim(xP)
obj
curve(pol,0,1)
c
obj
n+0
curve(pol,0,1)
f
pol(alpha)
pol(0)
pol(1)
pol
objective.new = objective
objective = objective.old
pol(0)
pol(alpha)
unique(P)
unique(as.vector(P))
objective.fun(x,Q)
objective.arr(x,QQ)
c
objective.arr(x,QQ)
f
obj
sum(sumxP^2)
sum(sumxP^2) / n
as.numeric(sum(sumxP^2) / n)
as.numeric(sum(sumxP^2) / n) + 0.5
as.numeric(sum(sumxP^2) / n) + 1
as.numeric(sum(sumxP^2) / n) / 10 + .5
print(sum(sumxP^2), digits=10)
print(sum(sumxP^2), digits=12)
print(sum(sumxP^2)/10, digits=12)
print(sum(sumxP^2)/n, digits=12)
debug(objective.fun)
objective.fun(x,Q)
sum(x^2)
n * sum(mu^2)
?colSums
colSums(QQ, dims=2)
QQ[,,n]
Q[,n]
head(x[,Q[,1],1])
head(x[,,1] %*% QQ[,,1])
head(x[,,1] %*% t(QQ[,,1]))
Q[,1]
head(x[,,1])
a <- matrix(runif(9),3,3)
solve_LSAP(a)
a <- matrix(runif(9),3,3)
solve_LSAP(a)
solve_LSAP(t(a))
a
solve_LSAP(a)
solve_LSAP(a) -> sig
sig
as.integer(sig)
Q
source("/Users/david/Library/Mobile Documents/com~apple~CloudDocs/Research/2018/Feature matching/simulations/lbfw.R")
test = lbfw(xx)
c(a,b,c)
c
test
alpha
a * alpha^2 + 2 * b * alpha + c
c - b^2/a
Q
source("/Users/david/Library/Mobile Documents/com~apple~CloudDocs/Research/2018/Feature matching/simulations/lbfw.R")
test = lbfw(xx)
Q
source("/Users/david/Desktop/tmp.R")
test = lbfw(xx)
test
objective
f
tgrad
tgrad - min(tgrad)
Q
source("/Users/david/Library/Mobile Documents/com~apple~CloudDocs/Research/2018/Feature matching/simulations/lbfw.R")
test = lbfw(xx)
c
test
objective
c
test
Q
source("/Users/david/Library/Mobile Documents/com~apple~CloudDocs/Research/2018/Feature matching/simulations/lbfw.R")
test = lbfw(xx)
c
undebug(objective.fun)
source("/Users/david/Library/Mobile Documents/com~apple~CloudDocs/Research/2018/Feature matching/simulations/lbfw.R")
test = lbfw(xx)
source("/Users/david/Library/Mobile Documents/com~apple~CloudDocs/Research/2018/Feature matching/simulations/lbfw.R")
test = lbfw(xx)
str(test)
P <- test$P
p[,,1]
P[,,1]
P[,,2]
objective.arr(xx,P)
Q <- array(.1,c(10,10,100))
objective.arr(xx,Q)
source("data-generation.R")
list.files()
getwd()
source("data-generation.R")
m <- 10#
## Additive noise level #
stdev <- 2.5#
## Number of PCs to use in simulation#
k <- 25
stdev = 1
n = 100
sim <- simulate.digits(pca[1:m],n,k,stdev)#
		x <- sim$x#
		label <-sim$label#
		unit <- sim$unit#
		p <- ncol(x)#
		xx <- t(x)#
		dim(xx) <- c(p,m,n)
test = lbfw(xx)
test$P[,,1]
test$P[,,2]
objective.arr(xx,test$P)
objective.arr(xx,array(1/m,c(m,m,n)))
init <- multihub.start(xx)
bca <- match.bca(xx, control = list(start = init))
bca$objective
str(bca)
objective.fun(x,init)
objective.fun(xx,init)
objective.fun(xx,bca$sigma)
source("/Users/david/Desktop/tmp.R")
P <- perm2arr(bca$sigma)
source("/Users/david/Library/Mobile Documents/com~apple~CloudDocs/Research/2018/Feature matching/package/matchFeat/simulations/lbfw.R")
test <- lb.fw(xx, P, verbose = T)
test <- lb.fw(xx,  verbose = T)
test <- lb.fw(xx, P, verbose = T)
test$P[,,1]
objective.arr(xx, array(1/m,c(m,m,n)))
x <- array(runif(m*n*p), dim=c(p,m,n))
test = lb.fw(x)
str(objective)
str(test)
test$lb
objective.arr(x, array(1/m,c(m,m,n)))
rm(list=ls())
source("data-generation.R")
ls()
dim(x)
length(label)
SD = sapply(0:9, function(j) mean(apply(x[label == j,],1,sd)))
SD
mean(SD)
SD = sapply(0:9, function(j) apply(x[label == j,],1,sd))
dim(SD)
length(SD)
class(SD)
str(SD)
SD = sapply(0:9, function(j) apply(x[label == j,],2,sd))
dim(SD)
mean(SD)
SD
m <- 10#
## Additive noise level #
stdev <- 2.5#
## Number of PCs to use in simulation#
k <- 25
n = 100
sim <- simulate.digits(pca[1:m],n,k,stdev)#
		x <- sim$x#
		label <-sim$label#
		unit <- sim$unit#
		p <- ncol(x)#
		xx <- t(x)#
		dim(xx) <- c(p,m,n)
label[1:20]
x = xx[,,1]
dim(x) = c(8,8,m)
image(x[,,1])
image(t(x[,,1]))
image(x[,8:1,1])
image(x[,8:1,2])
image(x[,8:1,3])
image(x[,8:1,4])
image(x[,8:1,5])
image(x[,8:1,9])
image(x[,8:1,10])
image(x[,8:1,9])
image(x[,8:1,7])
stdev = 0; sim <- simulate.digits(pca[1:m],n,k,stdev)#
		x <- sim$x#
		label <-sim$label#
		unit <- sim$unit#
		p <- ncol(x)#
		xx <- t(x)#
		dim(xx) <- c(p,m,n)
x = xx[,,1]
dim(x) = c(8,8,m)
image(x[,8:1,9])
label[1:10]
image(x[,8:1,1])
image(x[,8:1,2])
image(x[,8:1,3])
